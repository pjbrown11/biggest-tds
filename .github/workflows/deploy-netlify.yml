name: Build & Deploy (Netlify)

on:
    workflow_dispatch:
        inputs:
            run_deploy:
                description: "Deploy to Netlify? (true/false)"
                required: false
                default: "true"
    schedule:
        # 6:00 AM America/Chicago (Central) on Tuesdays = 11:00 UTC
        - cron: "0 11 * * TUE"

permissions:
    contents: write

jobs:
    build:
        runs-on: ubuntu-latest
        env:
            NODE_ENV: production
            PUPPETEER_SKIP_DOWNLOAD: "false"

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: |
                      package-lock.json
                      site/package-lock.json

            - name: Install root deps (if present)
              run: |
                  if [ -f package-lock.json ]; then npm ci; fi

            - name: Install site deps (include dev for Puppeteer)
              run: |
                  cd site
                  npm ci --include=dev

            - name: Install Chromium for Puppeteer
              run: |
                  cd site
                  npx puppeteer browsers install chrome

            - name: Build site (runs data scripts + SvelteKit build)
              run: |
                  npm run build-site

            # --- README summary block (auto-detect file casing) ---
            - name: Update readme (latest build info)
              run: |
                  node << 'EOF'
                  const fs = require('fs');
                  const path = require('path');

                  const readJSON = (p) => {
                    try { return JSON.parse(fs.readFileSync(p,'utf8')); } catch { return []; }
                  };

                  const trades = readJSON('site/src/data/trades/trades-current-year.json');
                  const standings = readJSON('site/src/data/standings/standings-current-year.json');
                  const rankings = (() => {
                    const c1 = 'site/src/data/drafts/dynasty-rankings.json';
                    const c2 = 'site/src/routes/drafts/dynasty-rankings-local.json';
                    if (fs.existsSync(c1)) return readJSON(c1);
                    if (fs.existsSync(c2)) return readJSON(c2);
                    return [];
                  })();

                  const repo = process.env.GITHUB_REPOSITORY || '';
                  const runId = process.env.GITHUB_RUN_ID || '';
                  const sha = (process.env.GITHUB_SHA || '').slice(0,7);
                  const runUrl = repo && runId ? `https://github.com/${repo}/actions/runs/${runId}` : '';
                  const when = new Date().toISOString().replace('T',' ').replace('Z',' UTC');

                  const block = `
                  <!--build-summary:start-->
                  **Latest automated build:** ${when}  
                  **Workflow run:** ${runUrl ? \`[#\${runId}](\${runUrl})\` : runId}  
                  **Commit:** \`${sha}\`

                  **Data snapshot**
                  - Trades (current year): ${trades.length}
                  - Standings rows (current year): ${standings.length}
                  - Dynasty rankings scraped: ${rankings.length}
                  <!--build-summary:end-->
                  `.trim();

                  // Find README with any common casing; default to 'readme.md'
                  const candidates = ['readme.md','README.md','Readme.md'];
                  const chosen = candidates.find(f => fs.existsSync(f)) || 'readme.md';
                  const readmePath = path.resolve(chosen);

                  let readme = fs.existsSync(readmePath) ? fs.readFileSync(readmePath,'utf8') : '# Project\n';
                  const start = '<!--build-summary:start-->';
                  const end = '<!--build-summary:end-->';

                  if (readme.includes(start) && readme.includes(end)) {
                    const pre = readme.split(start)[0];
                    const post = readme.split(end)[1];
                    readme = `${pre}${block}${post}`;
                  } else {
                    readme += `\n\n${block}\n`;
                  }

                  fs.writeFileSync(readmePath, readme);
                  console.log('README updated at:', readmePath);
                  EOF

            - name: Commit updated data (if any)
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

                  # Stage README regardless of case + generated data
                  git add \
                    README.md readme.md Readme.md \
                    site/src/data/trades/trades-current-year.json \
                    site/src/data/standings/standings-current-year.json \
                    site/src/routes/drafts/dynasty-rankings-local.json \
                    site/src/data/drafts/dynasty-rankings.json || true

                  if ! git diff --cached --quiet; then
                    git commit -m "chore(ci): update generated data + build summary [skip ci]"
                    git push
                  else
                    echo "No data/README changes to commit."
                  fi

            - name: Upload build artifact (optional)
              uses: actions/upload-artifact@v4
              with:
                  name: site-build
                  path: site/build

            - name: Deploy to Netlify
              if: ${{ github.event_name == 'schedule' || github.event.inputs.run_deploy != 'false' }}
              run: |
                  npx --yes netlify-cli deploy --dir=site/build --prod --site="$NETLIFY_SITE_ID"
              env:
                  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
                  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
